{
    "restAPI": {
        "jwtAuth": {
            "enabled": false,
            "salt": "HORNET"
        },
        "excludeHealthCheckFromAuth": false,
        "permittedRoutes": [
            "/health",
            "/mqtt",
            "/api/v1/info",
            "/api/v1/tips",
            "/api/v1/messages/:messageID",
            "/api/v1/messages/:messageID/metadata",
            "/api/v1/messages/:messageID/raw",
            "/api/v1/messages/:messageID/children",
            "/api/v1/messages",
            "/api/v1/transactions/:transactionID/included-message",
            "/api/v1/milestones/:milestoneIndex",
            "/api/v1/milestones/:milestoneIndex/utxo-changes",
            "/api/v1/outputs/:outputID",
            "/api/v1/addresses/:address",
            "/api/v1/addresses/:address/outputs",
            "/api/v1/addresses/ed25519/:address",
            "/api/v1/addresses/ed25519/:address/outputs",
            "/api/v1/treasury"
        ],
        "whitelistedAddresses": [
            "127.0.0.1",
            "::1"
        ],
        "bindAddress": "0.0.0.0:14265",
        "powEnabled": true,
        "powWorkerCount": 1,
        "limits": {
            "bodyLength": "1M",
            "maxResults": 1000
        }
    },
    "db": {
        "engine": "rocksdb",
        "path": "/app/db/spammer.db",
        "autoRevalidation": false
    },
    "snapshots": {
        "depth": 50,
        "interval": 200,
        "fullPath": "snapshots/private-tangle/full_snapshot.bin",
        "deltaPath": "snapshots/private-tangle/delta_snapshot_spammer.bin",
        "deltaSizeThresholdPercentage": 50.0
    },
    "protocol": {
        "networkID": "private-tangle",
        "bech32HRP": "iota-pt",
        "minPoWScore": 2000,
        "milestonePublicKeyCount": 2,
        "publicKeyRanges": [
            {
                "key": "8801f5db5d6dff962e3085bbec978e6ed5db0faef4a961a9d9d5390745c8ce60",
                "start": 0,
                "end": 777600
            },
            {
                "key": "8801f5db5d6dff962e3085bbec978e6ed5db0faef4a961a9d9d5390745c8ce60",
                "start": 0,
                "end": 1555200
            }
        ]
    },
    "pow": {
        "refreshTipsInterval": "5s"
    },
    "requests": {
        "discardOlderThan": "15s",
        "pendingReEnqueueInterval": "5s"
    },
    "tangle": {
        "milestoneTimeout": "30s"
    },
    "tipsel": {
        "maxDeltaMsgYoungestConeRootIndexToCMI": 8,
        "maxDeltaMsgOldestConeRootIndexToCMI": 13,
        "belowMaxDepth": 15,
        "nonLazy": {
            "retentionRulesTipsLimit": 100,
            "maxReferencedTipAge": "3s",
            "maxChildren": 30,
            "spammerTipsThreshold": 0
        },
        "semiLazy": {
            "retentionRulesTipsLimit": 20,
            "maxReferencedTipAge": "3s",
            "maxChildren": 2,
            "spammerTipsThreshold": 30
        }
    },
    "node": {
        "alias": "spammer",
        "profile": "auto",
        "disablePlugins": [
            "WarpSync",
            "Coordinator",
            "Dashboard",
            "Profiling",
            "Prometheus",
            "MQTT",
            "ZMQ"
        ],
        "enablePlugins": [
            "Spammer",
            "URTS",
            "RestAPI"
        ]
    },
    "spammer": {
        "message": "one-click-tangle.",
        "index": "HORNET Spammer",
        "indexSemiLazy": "HORNET Spammer Semi-Lazy",
        "cpuMaxUsage": 0.8,
        "mpsRateLimit": 5.0,
        "workers": 0,
        "autostart": true
    },
    "p2p": {
        "bindMultiAddresses": [
            "/ip4/0.0.0.0/tcp/15600"
        ],
        "connectionManager": {
            "highWatermark": 10,
            "lowWatermark": 5
        },
        "gossipUnknownPeersLimit": 4,
        "identityPrivateKey": "2746393796a6228b706464613467640645d0f4d3eb73000606476f0bf8ab71b2ad5f7a5d250634dacbcbeceeffaa6f1733b02c99ed495143d5652a8289cc9f06",
        "peerStore": {
            "path": "./p2pstore/spammer"
        },
        "reconnectInterval": "30s"
    },
    "p2pdisc": {
        "advertiseInterval": "30s",
        "maxDiscoveredPeerConns": 4,
        "rendezvousPoint": "between-two-vertices",
        "routingTableRefreshPeriod": "60s"
    },
    "logger": {
        "level": "error",
        "disableCaller": true,
        "encoding": "console",
        "outputPaths": [
            "stdout"
        ]
    }
}